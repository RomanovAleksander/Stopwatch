{"version":3,"sources":["components/Timer.js","components/Buttons.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","_ref","time","react_default","a","createElement","className","timeInSeconds","hours","Math","floor","minutes","seconds","hoursFormat","concat","minutesFormat","secondsFormant","Fragment","changeTimeFormat","Buttons","start","stop","wait","reset","status","type","onClick","title","App","_useState","useState","_useState2","Object","slicedToArray","setTime","_useState3","_useState4","setStatus","_useState5","_useState6","waitClicked","setWaitClicked","_useState7","_useState8","timeoutId","setTimeoutId","useEffect","stopwatch$","Observable","observer","setInterval","next","subscribe","prev","unsubscribe","components_Timer","components_Buttons","clearTimeout","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JA4BeA,EA1BD,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAmBf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAnBQ,SAACC,GACxB,IAAIC,EAAQC,KAAKC,MAAMH,EAAgB,MACnCI,EAAUF,KAAKC,OAAOH,EAAyB,KAARC,GAAiB,IACxDI,EAAUL,EAAyB,KAARC,EAA2B,GAAVG,EAE1CE,EAAcL,EAAQ,GAAR,IAAAM,OAAiBN,GAAUA,EACzCO,EAAiBJ,EAAU,GAAV,IAAAG,OAAmBH,GAAYA,EAChDK,EAAiBJ,EAAU,GAAV,IAAAE,OAAmBF,GAAYA,EAEtD,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAAA,YAAOQ,GACPV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,KAA0BH,EAAAC,EAAAC,cAAA,YAAOU,GACjCZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,KAA0BH,EAAAC,EAAAC,cAAA,YAAOW,IAOlCE,CAAiBhB,KCATiB,EArBC,SAAAlB,GAA0C,IAAvCmB,EAAuCnB,EAAvCmB,MAAOC,EAAgCpB,EAAhCoB,KAAMC,EAA0BrB,EAA1BqB,KAAMC,EAAoBtB,EAApBsB,MAAOC,EAAavB,EAAbuB,OAC3C,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UAEImB,EAASrB,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASC,QAASL,GAA/B,QACPlB,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASC,QAASN,GAA/B,UAGNjB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASE,MAAM,yBAAyBD,QAASJ,GAA9D,SAEFnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASC,QAASH,GAA/B,aCqDKK,MA/Df,WACE,IAAAC,EAAwBC,mBAAS,GAAjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAO3B,EAAP6B,EAAA,GAAaG,EAAbH,EAAA,GACAI,EAA4BL,oBAAS,GAArCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAOX,EAAPY,EAAA,GAAeC,EAAfD,EAAA,GACAE,EAAsCR,oBAAS,GAA/CS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAAkCZ,qBAAlCa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAOE,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GA8CA,OAnBAG,oBAAU,WACR,IAMMC,EANS,IAAIC,IAAW,SAAAC,GAC5BC,YAAY,WACVD,EAASE,QACR,OAIFC,UAAU,CACTD,KAAM,WACA3B,GAAQU,EAAQ,SAACmB,GAAD,OAAUA,EAAO,OAI3C,OAAQ,WACNN,EAAWO,gBAEZ,CAAC9B,IAGFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkD,EAAD,CAAOrD,KAAMA,IACbC,EAAAC,EAAAC,cAACmD,EAAD,CAASpC,MA/CC,WACZiB,GAAU,IA+CChB,KA5CA,WACXgB,GAAU,GACVH,EAAQ,IA2CGZ,KAxCA,WACPkB,IACFC,GAAe,GACfgB,aAAab,GAEbP,GAAU,IAGZI,GAAe,GACfI,EAAaa,WAAW,kBAAMjB,GAAe,IAAQ,OAgC1ClB,MA7BC,WACZW,EAAQ,IA6BGV,OAAQA,MCnDHmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef1e771d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Timer = ({ time }) => {\r\n  const changeTimeFormat = (timeInSeconds) => {\r\n    let hours = Math.floor(timeInSeconds / 3600);\r\n    let minutes = Math.floor((timeInSeconds - (hours * 3600)) / 60);\r\n    let seconds = timeInSeconds - (hours * 3600) - (minutes * 60);\r\n\r\n    const hoursFormat = hours < 10 ? `0${hours}` : hours;\r\n    const minutesFormat =  minutes < 10 ? `0${minutes}` : minutes;\r\n    const secondsFormant = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return (\r\n      <>\r\n        <span>{hoursFormat}</span>\r\n        <p className=\"colon\">:</p><span>{minutesFormat}</span>\r\n        <p className=\"colon\">:</p><span>{secondsFormant}</span>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      {changeTimeFormat(time)}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\n\r\nconst Buttons = ({ start, stop, wait, reset, status }) => {\r\n  return (\r\n    <div className=\"buttons-container\">\r\n      <ul className=\"buttons\">\r\n        <li>\r\n          {\r\n            status ? <button type=\"button\" onClick={stop}>Stop</button> :\r\n              <button type=\"button\" onClick={start}>Start</button>\r\n          }\r\n        </li>\r\n        <li>\r\n          <button type=\"button\" title=\"Click 2 times in 300ms\" onClick={wait}>Wait</button>\r\n        </li>\r\n        <li>\r\n          <button type=\"button\" onClick={reset}>Reset</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Buttons;\r\n","import React, {useState, useEffect}  from 'react';\nimport {Observable} from 'rxjs';\nimport Timer from './Timer';\nimport Buttons from './Buttons';\nimport '../styles/index.css';\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [status, setStatus] = useState(false);\n  const [waitClicked, setWaitClicked] = useState(false);\n  const [timeoutId, setTimeoutId] = useState();\n\n  const start = () => {\n    setStatus(true);\n  };\n\n  const stop = () => {\n    setStatus(false);\n    setTime(0);\n  }\n\n  const wait = () => {\n    if (waitClicked) {\n      setWaitClicked(false);\n      clearTimeout(timeoutId);\n\n      setStatus(false);\n    }\n\n    setWaitClicked(true);\n    setTimeoutId(setTimeout(() => setWaitClicked(false), 300));\n  };\n\n  const reset = () => {\n    setTime(0);\n  }\n\n  useEffect(() => {\n    const timer$ = new Observable(observer => {\n      setInterval(() => {\n        observer.next();\n      }, 1000);\n    });\n\n    const stopwatch$ = timer$\n      .subscribe({\n        next: () => {\n          if (status) setTime((prev) => prev + 1)\n        }\n      });\n\n    return (() => {\n      stopwatch$.unsubscribe();\n    });\n  }, [status])\n\n  return (\n    <div className=\"container\">\n      <Timer time={time} />\n      <Buttons start={start}\n               stop={stop}\n               wait={wait}\n               reset={reset}\n               status={status}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}